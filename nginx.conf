error_log /var/log/nginx/error.log warn;

# Dynamic CORS origin allow-list for api.wtn4.com (root + any subdomain of wtn4.com)
# We reflect the Origin only if it matches the allowed pattern; otherwise we emit none.
map $http_origin $allowed_origin {
    default "";
    ~^https://([a-zA-Z0-9-]+\.)?wtn4\.com$ $http_origin; # wtn4.com, www.wtn4.com, <tenant>.wtn4.com, etc.
}

upstream frontend_upstream {
    server frontend:3001;
    keepalive 8;
}

# HTTP -> HTTPS frontend
server {
    listen 80;
    listen [::]:80;
    server_name wtn4.com www.wtn4.com *.wtn4.com;
    location = /nginx-healthz { add_header Content-Type text/plain; return 200 'ok'; }
    location /.well-known/acme-challenge/ { root /var/www/html; }
    location / { return 301 https://$host$request_uri; }
}

# HTTP -> HTTPS api
server {
    listen 80;
    listen [::]:80;
    server_name api.wtn4.com;
    location = /nginx-healthz { add_header Content-Type text/plain; return 200 'ok'; }
    location / { return 301 https://$host$request_uri; }
}

# API HTTPS
server {
    listen 443 ssl;          # كان: listen 443 ssl http2;
    listen [::]:443 ssl;     # كان: listen [::]:443 ssl http2;
    http2 on;

    server_name api.wtn4.com;

    ssl_certificate     /etc/nginx/certs/origin.pem;
    ssl_certificate_key /etc/nginx/certs/origin.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

    location = /nginx-healthz { add_header Content-Type text/plain; return 200 'ok'; }

    # Serve public client OpenAPI (excluded from global prefix in Nest) directly
    location = /client/api/openapi.json {
        proxy_pass http://backend:3000/client/api/openapi.json;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        add_header Access-Control-Allow-Origin * always;
        add_header Cache-Control "public, max-age=60";
    }

    # --- Global CORS headers for API (apply to all locations) ---
    add_header Access-Control-Allow-Origin $http_origin always;
    add_header Access-Control-Allow-Credentials true always;
    add_header Access-Control-Allow-Methods "GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS" always;
    add_header Access-Control-Allow-Headers "Content-Type,Authorization,X-Tenant-Host,X-Requested-With,Accept,Origin" always;

    location ^~ /api/ {
        # Pass everything (including OPTIONS) directly to backend; only preserve Origin header forwarding.
        proxy_pass http://backend:3000;
        proxy_set_header Origin $http_origin;
    }

    location / { return 404; }
}

# Frontend HTTPS
server {
    listen 443 ssl;          # كان: listen 443 ssl http2;
    listen [::]:443 ssl;     # كان: listen [::]:443 ssl http2;
    http2 on;

    server_name wtn4.com www.wtn4.com *.wtn4.com;

    ssl_certificate     /etc/nginx/certs/origin.pem;
    ssl_certificate_key /etc/nginx/certs/origin.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

    location = /nginx-healthz { add_header Content-Type text/plain; return 200 'ok'; }

    # Expose the same OpenAPI JSON on tenant subdomains for convenience
    location = /client/api/openapi.json {
        proxy_pass http://backend:3000/client/api/openapi.json;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        add_header Access-Control-Allow-Origin * always;
        add_header Cache-Control "public, max-age=60";
    }

    location / {
        proxy_pass http://frontend_upstream;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 5s;
        proxy_read_timeout 60s;
    }
}
