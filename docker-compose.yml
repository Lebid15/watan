services:
  postgres:
    image: postgres:15-alpine
    container_name: watan-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: watan
      POSTGRES_USER: watan
      POSTGRES_PASSWORD: changeme
    volumes:
      - pg_data:/var/lib/postgresql/data
    expose:
      - "5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "watan"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 10s

  backend:
    build: ./backend
    container_name: watan-backend
    restart: unless-stopped
    healthcheck:
      # Nest global prefix is /api, so health endpoint is /api/health
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3000/api/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      NODE_ENV: production
      PORT: 3000
      # (أزل سرّ bootstrap بعد إنشاء المستخدم المطوّر)
      DATABASE_URL: postgres://watan:changeme@postgres:5432/watan?sslmode=disable
      REDIS_URL: ${REDIS_URL}
      JWT_SECRET: ${JWT_SECRET}
      PUBLIC_TENANT_BASE_DOMAIN: ${PUBLIC_TENANT_BASE_DOMAIN}
      DEBUG_TENANT_GUARD: "1"
      # Cloudinary (أضف القيم في ملف .env بجذر المشروع)
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      # بديل مختصر؛ استخدم إمّا هذا أو المفاتيح الثلاثة بالأعلى (واجعل القيم متطابقة):
      CLOUDINARY_URL: ${CLOUDINARY_URL}
    expose:
      - "3000"
    volumes:
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    container_name: watan-frontend
    restart: unless-stopped
    healthcheck:
      # Use CMD-SHELL so we can chain and ensure proper exit code
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3001 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      NODE_ENV: production
      PORT: 3001
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    expose:
      - "3001"
    depends_on:
      - backend
    volumes:
      - frontend_logs:/app/logs

  nginx:
    image: nginx:alpine
    container_name: watan-nginx
    depends_on:
      - backend
      - frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - nginx_logs:/var/log/nginx
    restart: unless-stopped

volumes:
  pg_data:
  backend_logs:
  frontend_logs:
  nginx_logs:

## Usage:
# 1) Create a .env file (DATABASE_URL, REDIS_URL, JWT_SECRET, etc.)
#    Example internal DB URL now that Postgres service is added:
#    DATABASE_URL=postgres://watan:changeme@postgres:5432/watan?sslmode=disable
# 2) docker compose build --pull
# 3) docker compose up -d
# 4) Point DNS (Cloudflare) A/CNAME records:
#      syrz1.com, www.syrz1.com -> VPS IP (frontend via nginx)
#      api.syrz1.com -> VPS IP (backend via nginx)
# Cloudflare Full mode terminates HTTPS; nginx here listens only on :80.
