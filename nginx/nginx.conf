user  nginx;
worker_processes auto;
pid /var/run/nginx.pid;

events { worker_connections 1024; }

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  sendfile on;
  tcp_nopush on;
  keepalive_timeout 65;
  server_tokens off;

  gzip on;
  gzip_min_length 1024;
  gzip_comp_level 5;
  gzip_types text/plain text/css application/javascript application/json application/xml image/svg+xml;

  upstream frontend_upstream { server frontend:3001; }
  upstream backend_upstream  { server backend:3000; }

  # Real IP (Cloudflare) — optional: you can enumerate CF ranges instead of 0.0.0.0/0 for stricter security.
  real_ip_header CF-Connecting-IP;
  set_real_ip_from 0.0.0.0/0;

  map $http_upgrade $connection_upgrade { default upgrade; '' close; }

  # Frontend (root + www)
  server {
    listen 80;
    server_name syrz1.com www.syrz1.com;

    location / {
      proxy_pass http://frontend_upstream;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr; # after real_ip this becomes client IP (CF-Connecting-IP)
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-Port $server_port;
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_cache_bypass $http_upgrade;
    }
  }

  # Backend API
  server {
    listen 80;
    server_name api.syrz1.com;

    location / {
      proxy_pass http://backend_upstream;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-Port $server_port;
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_cache_bypass $http_upgrade;
    }
  }

  # Fallback block – drop unknown hosts (Cloudflare should never route them here)
  server {
    listen 80 default_server;
    return 444;
  }
}
