upstream frontend_upstream { server frontend:3001; }
upstream backend_upstream  { server backend:3000; }

# ==== Dynamic CORS origin mapping (allow only syrz1.com and its subdomains) ====
map $http_origin $cors_allow_origin {
  default ""; # empty => header omitted
  ~^https://([A-Za-z0-9-]+\.)?syrz1\.com$ $http_origin;
}

# Real IP (Cloudflare) – this file is included inside the main http{} so directives are valid
real_ip_header CF-Connecting-IP;
set_real_ip_from 0.0.0.0/0;
map $http_upgrade $connection_upgrade { default upgrade; '' close; }

# Frontend HTTP (optional – can redirect to HTTPS later if needed)
server {
  listen 80;
  listen [::]:80;
  # Include root, www, and any non-api subdomain (tenant) *.syrz1.com
  server_name syrz1.com www.syrz1.com ~^(?!(api)\.)[A-Za-z0-9-]+\.syrz1\.com$;
  # Public client OpenAPI (proxy to backend without /api prefix)
  location = /client/api/openapi.json {
    proxy_pass http://backend_upstream/client/api/openapi.json;
  # Proxy all Client API calls (unprefixed) to backend global /api prefix
  location ^~ /client/api/ {
    # Map /client/api/...  -> backend /api/client/api/...
    proxy_pass http://backend_upstream/api/client/api/;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Tenant-Host $host;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    proxy_cache_bypass $http_upgrade;
    add_header X-Debug-Upstream backend-client-api always;
  }
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    add_header Access-Control-Allow-Origin * always;
    add_header Cache-Control "public, max-age=60";
  }
  # --- INTERNAL NEXT API (served by frontend, not backend) ---
  # Critical user profile route must hit backend (avoid Next.js handling /api/users/* paths)
  location = /api/users/profile-with-currency { proxy_pass http://backend_upstream; proxy_set_header X-Tenant-Host $host; }
  location = /api/me { proxy_pass http://frontend_upstream; }
  location = /api/auth/logout { proxy_pass http://frontend_upstream; }
  location = /api/auth/sync { proxy_pass http://frontend_upstream; }
  location = /api/admin/pending-orders-count { proxy_pass http://frontend_upstream; }
  location = /api/admin/pending-deposits-count { proxy_pass http://frontend_upstream; }
  # Fallback: proxy /api/* to backend if api.syrz1.com subdomain unreachable
  location ^~ /api/ {
    # Preserve original /api/... path so Nest global prefix still matches
    proxy_pass http://backend_upstream;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;
  # Pass tenant host for backend multi-tenant resolution (was missing here)
  proxy_set_header X-Tenant-Host $host;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    proxy_cache_bypass $http_upgrade;
    client_max_body_size 15m;
    proxy_request_buffering off;
  add_header X-Debug-Upstream backend always;
  }
  location / {
    proxy_pass http://frontend_upstream;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;
    # Pass tenant hint header (host without port)
    proxy_set_header X-Tenant-Host $host;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    proxy_cache_bypass $http_upgrade;
  }
}

# Backend API HTTP
server {
  listen 80;
  listen [::]:80;
  server_name api.syrz1.com;
  location / {
    proxy_pass http://backend_upstream;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    proxy_cache_bypass $http_upgrade;

    client_max_body_size 15m;
    proxy_request_buffering off;
    proxy_connect_timeout 30s;
    proxy_send_timeout 120s;
    proxy_read_timeout 120s;
    send_timeout 120s;
    proxy_buffering on;
    proxy_buffers 16 16k;
    proxy_busy_buffers_size 24k;
    proxy_hide_header Access-Control-Allow-Origin;
    proxy_hide_header Access-Control-Allow-Credentials;
    proxy_hide_header Access-Control-Allow-Headers;
    proxy_hide_header Access-Control-Allow-Methods;
    proxy_hide_header Vary;
  add_header Access-Control-Allow-Origin $cors_allow_origin always;
    add_header Access-Control-Allow-Credentials true always;
  # Added X-Upload-Correlation so browser preflight allows custom header
  add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Tenant-Host, X-Tenant-Id, X-Upload-Correlation" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
    add_header Vary Origin always;
  # Debug headers (temporary) to verify CORS mapping
  add_header X-Debug-Req-Origin $http_origin always;
  add_header X-Debug-Cors-Origin $cors_allow_origin always;
    if ($request_method = OPTIONS) { return 204; }
  }
}

# Frontend HTTPS
server {
  listen 443 ssl;
  listen [::]:443 ssl;
  http2 on;
  # Include root, www, and any non-api subdomain (tenant) *.syrz1.com
  server_name syrz1.com www.syrz1.com ~^(?!(api)\.)[A-Za-z0-9-]+\.syrz1\.com$;
  # Public client OpenAPI (HTTPS) – same as HTTP
  location = /client/api/openapi.json {
    proxy_pass http://backend_upstream/client/api/openapi.json;
  # Proxy all Client API calls (HTTPS) to backend with /api prefix
  location ^~ /client/api/ {
    proxy_pass http://backend_upstream/api/client/api/;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Tenant-Host $host;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    proxy_cache_bypass $http_upgrade;
    add_header X-Debug-Upstream backend-client-api always;
  }
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    add_header Access-Control-Allow-Origin * always;
    add_header Cache-Control "public, max-age=60";
  }
  # --- INTERNAL NEXT API (served by frontend, not backend) ---
  location = /api/users/profile-with-currency { proxy_pass http://backend_upstream; proxy_set_header X-Tenant-Host $host; }
  location = /api/me { proxy_pass http://frontend_upstream; }
  location = /api/auth/logout { proxy_pass http://frontend_upstream; }
  location = /api/auth/sync { proxy_pass http://frontend_upstream; }
  location = /api/admin/pending-orders-count { proxy_pass http://frontend_upstream; }
  location = /api/admin/pending-deposits-count { proxy_pass http://frontend_upstream; }
  ssl_certificate     /etc/nginx/certs/origin.pem;
  ssl_certificate_key /etc/nginx/certs/origin.key;
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers on;
  # Fallback: proxy /api/* to backend if api.syrz1.com subdomain unreachable
  location ^~ /api/ {
    # Preserve original /api/... path so Nest global prefix still matches
    proxy_pass http://backend_upstream;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;
  # Pass tenant host for backend multi-tenant resolution (was missing here)
  proxy_set_header X-Tenant-Host $host;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    proxy_cache_bypass $http_upgrade;
    client_max_body_size 15m;
    proxy_request_buffering off;
  add_header X-Debug-Upstream backend always;
  }
  location / {
    proxy_pass http://frontend_upstream;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;
    proxy_set_header X-Tenant-Host $host;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    proxy_cache_bypass $http_upgrade;
  }
}

# Backend API HTTPS
server {
  listen 443 ssl;
  listen [::]:443 ssl;
  http2 on;
  server_name api.syrz1.com;
  ssl_certificate     /etc/nginx/certs/origin.pem;
  ssl_certificate_key /etc/nginx/certs/origin.key;
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers on;
  location / {
    proxy_pass http://backend_upstream;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    proxy_cache_bypass $http_upgrade;
    client_max_body_size 15m;
    proxy_request_buffering off;
    proxy_connect_timeout 30s;
    proxy_send_timeout 120s;
    proxy_read_timeout 120s;
    send_timeout 120s;
    proxy_buffering on;
    proxy_buffers 16 16k;
    proxy_busy_buffers_size 24k;
    proxy_hide_header Access-Control-Allow-Origin;
    proxy_hide_header Access-Control-Allow-Credentials;
    proxy_hide_header Access-Control-Allow-Headers;
    proxy_hide_header Access-Control-Allow-Methods;
    proxy_hide_header Vary;
  add_header Access-Control-Allow-Origin $cors_allow_origin always;
    add_header Access-Control-Allow-Credentials true always;
  # Added X-Upload-Correlation so browser preflight allows custom header
  add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Tenant-Host, X-Tenant-Id, X-Upload-Correlation" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
    add_header Vary Origin always;
  # Debug headers (temporary) to verify CORS mapping
  add_header X-Debug-Req-Origin $http_origin always;
  add_header X-Debug-Cors-Origin $cors_allow_origin always;
    if ($request_method = OPTIONS) { return 204; }
  }
}

# Fallback unknown hosts
server {
  listen 80 default_server;
  return 444;
}
