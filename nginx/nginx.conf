user  nginx;
worker_processes auto;
pid /var/run/nginx.pid;

events { worker_connections 1024; }

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  sendfile on;
  tcp_nopush on;
  keepalive_timeout 65;
  server_tokens off;

  gzip on;
  gzip_min_length 1024;
  gzip_comp_level 5;
  gzip_types text/plain text/css application/javascript application/json application/xml image/svg+xml;

  upstream frontend_upstream { server frontend:3001; }
  upstream backend_upstream  { server backend:3000; }

  # Real IP (Cloudflare) — optional: you can enumerate CF ranges instead of 0.0.0.0/0 for stricter security.
  real_ip_header CF-Connecting-IP;
  set_real_ip_from 0.0.0.0/0;

  map $http_upgrade $connection_upgrade { default upgrade; '' close; }

  # Frontend (root + www)
  server {
    listen 80;
    server_name syrz1.com www.syrz1.com;

    location / {
      proxy_pass http://frontend_upstream;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr; # after real_ip this becomes client IP (CF-Connecting-IP)
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-Port $server_port;
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_cache_bypass $http_upgrade;
    }
  }

  # Backend API
  server {
    listen 80;
    server_name api.syrz1.com;

    location / {
      proxy_pass http://backend_upstream;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-Port $server_port;
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_cache_bypass $http_upgrade;

  # --- Upload hardening / prevent 502 on slower upstream or larger images ---
  # Allow images up to ~15MB (backend limit currently 10MB) giving some headroom.
  client_max_body_size 15m;
  # Disable request buffering so multipart stream is piped directly (avoid tmp disk spill / delays)
  proxy_request_buffering off;
  # Timeouts (Cloudflare default 100s). Keep generous but safe.
  proxy_connect_timeout 30s;
  proxy_send_timeout 120s;
  proxy_read_timeout 120s;
  send_timeout 120s;
  # Slightly increase buffer sizes (optional)
  proxy_buffering on;
  proxy_buffers 16 16k;
  proxy_busy_buffers_size 24k;

  # Unified CORS (no $http_origin to avoid duplicates / reflection risks)
  proxy_hide_header Access-Control-Allow-Origin;
  proxy_hide_header Access-Control-Allow-Credentials;
  proxy_hide_header Access-Control-Allow-Headers;
  proxy_hide_header Access-Control-Allow-Methods;
  proxy_hide_header Vary;

  add_header Access-Control-Allow-Origin https://syrz1.com always;
  add_header Access-Control-Allow-Credentials true always;
  add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Tenant-Host, X-Tenant-Id" always;
  add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
  add_header Vary Origin always;

  if ($request_method = OPTIONS) { return 204; }
    }
  }

  # ================= HTTPS (Cloudflare Full/Strict expects 443) =================
  # Frontend HTTPS
  server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name syrz1.com www.syrz1.com;

    ssl_certificate     /etc/nginx/certs/origin.pem;
    ssl_certificate_key /etc/nginx/certs/origin.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

    location / {
      proxy_pass http://frontend_upstream;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-Port $server_port;
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_cache_bypass $http_upgrade;
    }
  }

  # Backend API HTTPS
  server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name api.syrz1.com;

    ssl_certificate     /etc/nginx/certs/origin.pem;
    ssl_certificate_key /etc/nginx/certs/origin.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

    location / {
      proxy_pass http://backend_upstream;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Forwarded-Port $server_port;
      proxy_http_version 1.1;
      proxy_set_header Connection "";
      proxy_cache_bypass $http_upgrade;

      # Mirror hardening/CORS settings from port 80 API block
      client_max_body_size 15m;
      proxy_request_buffering off;
      proxy_connect_timeout 30s;
      proxy_send_timeout 120s;
      proxy_read_timeout 120s;
      send_timeout 120s;
      proxy_buffering on;
      proxy_buffers 16 16k;
      proxy_busy_buffers_size 24k;
      proxy_hide_header Access-Control-Allow-Origin;
      proxy_hide_header Access-Control-Allow-Credentials;
      proxy_hide_header Access-Control-Allow-Headers;
      proxy_hide_header Access-Control-Allow-Methods;
      proxy_hide_header Vary;
      add_header Access-Control-Allow-Origin https://syrz1.com always;
      add_header Access-Control-Allow-Credentials true always;
      add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Tenant-Host, X-Tenant-Id" always;
      add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
      add_header Vary Origin always;
      if ($request_method = OPTIONS) { return 204; }
    }
  }

  # Fallback block – drop unknown hosts (Cloudflare should never route them here)
  server {
    listen 80 default_server;
    return 444;
  }
}
