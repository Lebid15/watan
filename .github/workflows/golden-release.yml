name: Golden Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Gold version tag (e.g., v1.0.0-gold)'
        required: true
  # Optionally allow re-run if tag already exists (no push trigger here to avoid recursion)

permissions:
  contents: write   # to create tag
  id-token: write   # for cosign keyless
  packages: write
  actions: read

env:
  GOLD_DIR: gold

jobs:
  tag:
    name: Create tag if missing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Ensure tag
        run: |
          TAG="${{ github.event.inputs.version }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists"
          else
            git tag "$TAG"
            git push origin "$TAG"
            echo "Created and pushed tag $TAG"
          fi

  build-and-sbom:
    name: Build images + SBOM + sign
    needs: tag
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend, frontend]
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR (optional)
        run: |
          if [ -n "${REGISTRY_USER:-}" ] && [ -n "${REGISTRY_TOKEN:-}" ]; then
            echo "Logging into GHCR"
            echo "${REGISTRY_TOKEN}" | docker login ghcr.io -u "${REGISTRY_USER}" --password-stdin
          else
            echo "[info] REGISTRY_USER/REGISTRY_TOKEN not set; skipping GHCR login"
          fi
      - name: Build image
        run: |
          TAG="${{ github.event.inputs.version }}"
          IMAGE="ghcr.io/${{ github.repository_owner }}/watan-${{ matrix.component }}:${TAG}"
          DOCKERFILE="./${{ matrix.component }}/Dockerfile"
          docker build -f "$DOCKERFILE" -t "$IMAGE" "./${{ matrix.component }}"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
      - name: Extract digest
        id: digest
        run: |
          DIGEST=$(docker image inspect "$IMAGE" --format '{{json .RepoDigests}}' | jq -r '.[0]' )
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
          echo "$DIGEST" > digest.txt
      - name: Install syft
        uses: anchore/sbom-action/download-syft@v0.17.9
      - name: Generate SBOM (syft JSON+SPDX)
        run: |
          syft packages "$IMAGE" -o json > sbom-${{ matrix.component }}.json
          syft packages "$IMAGE" -o spdx-json > sbom-${{ matrix.component }}-spdx.json
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.5.0
      - name: Cosign sign image (keyless)
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign --yes "$IMAGE"
      - name: Cosign attest SBOM
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign attest --yes --predicate sbom-${{ matrix.component }}.json --type cyclonedx "$IMAGE"
      - name: Collect artifacts
        run: |
          mkdir -p $GOLD_DIR/${{ github.event.inputs.version }}/${{ matrix.component }}
          cp digest.txt sbom-${{ matrix.component }}.json sbom-${{ matrix.component }}-spdx.json $GOLD_DIR/${{ github.event.inputs.version }}/${{ matrix.component }}/
      - name: Upload component artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.component }}
          path: ${{ env.GOLD_DIR }}/${{ github.event.inputs.version }}/${{ matrix.component }}

  aggregate-digests:
    name: Aggregate digests
    needs: build-and-sbom
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Build digests file
        run: |
          mkdir -p gold/${{ github.event.inputs.version }}
          find artifacts -name digest.txt -print -exec cat {} \; | paste - - > gold/${{ github.event.inputs.version }}/digests.txt || true
          echo 'Collected digests:'
          cat gold/${{ github.event.inputs.version }}/digests.txt || true
      - name: Upload digests
        uses: actions/upload-artifact@v4
        with:
          name: digests
          path: gold/${{ github.event.inputs.version }}/digests.txt

  # Placeholder for DB + wallets backup collection (requires infra access) - would normally run on a self-hosted runner with docker & access.
  collect-db-wallets:
    if: false  # disabled until self-hosted runner & secrets available
    needs: aggregate-digests
    runs-on: ubuntu-latest
    steps:
      - name: NOTE
        run: echo 'DB & wallets backup collection to be implemented on infra runner.'

  finalize-report:
    name: Assemble Gold Build Report
    needs: [aggregate-digests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: gold/${{ github.event.inputs.version }}
      - name: Generate report
        run: |
          REPORT=gold/${{ github.event.inputs.version }}/GOLD_BUILD_REPORT.md
          mkdir -p $(dirname "$REPORT")
          echo "# Gold Build Report" > "$REPORT"
          echo "Version: ${{ github.event.inputs.version }}" >> "$REPORT"
          echo "Date: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> "$REPORT"
          echo "\n## Image Digests" >> "$REPORT"
          if [ -f gold/${{ github.event.inputs.version }}/digests.txt ]; then
            cat gold/${{ github.event.inputs.version }}/digests.txt >> "$REPORT"
          else
            echo 'No digests file found.' >> "$REPORT"
          fi
          echo "\n## SBOM Artifacts" >> "$REPORT"
          find gold/${{ github.event.inputs.version }}/ -maxdepth 2 -name 'sbom-*.json' -printf '* %P\n' >> "$REPORT" || true
          echo "\n## Notes" >> "$REPORT"
          echo "DB & wallets backup artifacts pending infra integration." >> "$REPORT"
      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: gold-report
          path: gold/${{ github.event.inputs.version }}/GOLD_BUILD_REPORT.md
