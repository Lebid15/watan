name: Security Baseline

on:
  workflow_dispatch:
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 3 * * *'

jobs:
  deps-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Backend audit
        working-directory: backend
        run: |
          npm ci --no-audit --no-fund
          npm audit --production || true
      - name: Frontend audit
        working-directory: frontend
        run: |
          npm ci --no-audit --no-fund
          npm audit --production || true

  semgrep:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Semgrep CLI
        run: pip install semgrep
      - name: Run Semgrep (SARIF)
        run: semgrep --config auto --error --sarif -o semgrep.sarif || true
      - name: Upload Semgrep SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

  gitleaks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install gitleaks & jq
        run: |
          wget -q https://github.com/gitleaks/gitleaks/releases/download/v8.18.4/gitleaks_8.18.4_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.4_linux_x64.tar.gz gitleaks
          sudo mv gitleaks /usr/local/bin/
          sudo apt-get update -y && sudo apt-get install -y jq
      - name: Run gitleaks (JSON + SARIF)
        run: |
          gitleaks detect --no-git -s . -r gitleaks.json --redact || true
          if jq -e '.findings | length > 0' gitleaks.json >/dev/null 2>&1; then
            jq '{"$schema":"https://json.schemastore.org/sarif-2.1.0.json","version":"2.1.0","runs":[{"tool":{"driver":{"name":"gitleaks","informationUri":"https://github.com/gitleaks/gitleaks"}},"results":(.findings|map({"ruleId":.rule,"message":{"text":.description},"level":"error","locations":[{"physicalLocation":{"artifactLocation":{"uri":.file},"region":{"startLine":(.startLine//1)}}}]}))}]}' gitleaks.json > gitleaks.sarif
          else
            echo '{"$schema":"https://json.schemastore.org/sarif-2.1.0.json","version":"2.1.0","runs":[{"tool":{"driver":{"name":"gitleaks"}},"results":[]}]}' > gitleaks.sarif
          fi
      - name: Upload gitleaks SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif

  trivy-images:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend, frontend]
    steps:
      - uses: actions/checkout@v4
      - name: Build image
        run: |
          if [ "${{ matrix.component }}" = "backend" ]; then
            docker build -t watan-backend:ci ./backend
          else
            docker build -t watan-frontend:ci ./frontend
          fi
      - name: Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'watan-${{ matrix.component }}:ci'
          format: 'table'
          exit-code: '0'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'

  k6-smoke:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install k6
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gnupg2 ca-certificates
          curl -s https://dl.k6.io/key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/k6-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update -y && sudo apt-get install -y k6
      - name: Run login smoke
        run: |
          EMAIL="${SMOKE_TEST_EMAIL:-}" PASSWORD="${SMOKE_TEST_PASSWORD:-}" k6 run scripts/security/k6-login-smoke.js || true

  ffuf-discovery:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install ffuf
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ffuf || sudo snap install ffuf || true
      - name: Run ffuf (API)
        run: BASE=https://api.staging.wtn4.com WORDLIST=/usr/share/wordlists/dirb/common.txt ./scripts/security/ffuf_discovery.sh || true
      - name: Archive ffuf results
        uses: actions/upload-artifact@v4
        with:
          name: ffuf-results
          path: ffuf-results.json

  zap-baseline:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: OWASP ZAP Baseline (staging)
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: 'https://staging.wtn4.com'
          rules_file_name: '.zap-rules'
          cmd_options: '-a'
      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: |
            report_html.html
            zap_scan.log

  aggregate:
    runs-on: ubuntu-latest
    needs: [deps-audit, semgrep, gitleaks, trivy-images]
    steps:
      - name: Summary
        run: |
          echo 'Security baseline jobs finished. Review individual job logs.'
